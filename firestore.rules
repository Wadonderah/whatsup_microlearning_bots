rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidUser(userData) {
      return userData.keys().hasAll(['uid', 'email', 'createdAt']) &&
             userData.uid == request.auth.uid &&
             userData.email == request.auth.token.email;
    }
    
    function isValidChatMessage(messageData) {
      return messageData.keys().hasAll(['id', 'content', 'role', 'timestamp', 'userId']) &&
             messageData.userId == request.auth.uid &&
             messageData.role in ['user', 'assistant', 'system'] &&
             messageData.timestamp is timestamp;
    }
    
    function isValidLearningSession(sessionData) {
      return sessionData.keys().hasAll(['id', 'userId', 'startTime', 'topic']) &&
             sessionData.userId == request.auth.uid &&
             sessionData.startTime is timestamp;
    }

    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId) && isValidUser(resource.data);
      
      // User preferences subcollection
      match /preferences/{document=**} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      // User statistics subcollection
      match /statistics/{document=**} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Chat history collection - users can only access their own chats
    match /chat_history/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // Individual chat messages
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated() && isOwner(userId) && isValidChatMessage(request.resource.data);
      }
      
      // Chat sessions
      match /sessions/{sessionId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Learning sessions collection
    match /learning_sessions/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // Individual learning sessions
      match /sessions/{sessionId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated() && isOwner(userId) && isValidLearningSession(request.resource.data);
      }
    }

    // User progress tracking
    match /user_progress/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // Progress entries
      match /entries/{entryId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      // Achievements
      match /achievements/{achievementId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Notification preferences
    match /notification_preferences/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // App analytics (read-only for users, write for system)
    match /analytics/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server-side writes
    }

    // Public content (templates, tips, etc.) - read-only
    match /public_content/{document=**} {
      allow read: if true; // Public read access
      allow write: if false; // Only admin writes
    }

    // Prompt templates - read-only for users
    match /prompt_templates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admin writes
    }

    // System configuration - read-only
    match /system_config/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admin writes
    }

    // Default deny rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
